/* 
AB20161122
1. Добавлна сортировка по номеру в иерархии техниеских терминов и атрибутов
2.  Изменен вывод объектов типа атрибут без символов " - " и ";"   
*/

// AS20160201
// Добавлен стиль для функций требующих автоматизации (жирный с подчеркиванием)

// AS20160209
// добавлена переменная ed для документов типа - электронный документ

// Перечень изменений, внесенных в скрипт 
var g_nloc = Context.getSelectedLanguage(); 
var ogroupmodels = ArisData.getSelectedModels(); // выбранная пользователем группа моделей, на которых запущен скрипт

var osinglemodel = ogroupmodels[0];              // выбираем первую модель из массива   
var omodellistglobal = new Array();

var ooutfile = undefined; 
var txtCenterText = getString ("TEXT_1");        // Copyright надпись
var txtCurrentYear = new Date().getFullYear();   // переменная текущего года
var txtTypeDiagram = getString ("TEXT_4");       // Название типа диаграммы цепочки добавленного качества
var txtCity = getString ("TEXT_5");              // Название города
//AS20160209
var ed = getString ("TEXT_6");  // В электром виде - объекты типа электронный документ

/* итоговые переменные всего функицй, автоматизированных функций, подлежащих автоматизации функции,
неавтоматизированных функциий, контрольных функций */
var totfunc = 0, totavtfunc = 0, totshldavtfunc = 0, totnoavtfunc = 0, totcontrolfunc = 0;
var ident; // переменная для нумерации модели
var identBool = true;

var groupfuncobjects = osinglemodel.ObjOccListFilter(Constants.OT_FUNC); // фильтр только функции
var ooutobjocclist = new Array();
var oinpobjocclist = new Array();
var firstcolmatrixagr = new Array("Соответствие модели БП целям описания БП, указанным в ходатайстве");
var expertnum;
var ocurrentobj;
var bstrdesc;
var strRegExp = new SearchRegExp();


function main() {
    
    Context.setProperty("use-new-output", true);
    ooutfile = Context.createOutputObject(Context.getSelectedFormat(), Context.getSelectedFile());
    
    //сортируем по расположению объектов в модели
    groupfuncobjects = ArisData.sort(groupfuncobjects, Constants.AT_HIER_NUM, Constants.SORT_GEOMETRIC, g_nloc);
    
    // Создаем объект типа *.doc
    
    ooutfile.Init(g_nloc);
    
    // Параметры страницы  
    //PortraitPage(false, ooutfile);
    ooutfile.SetPrintScaling(120);
    
    
    //	Cтили, используемые для вывода заголовков и таблиц
    ooutfile.DefineF("Heading 0", "Times New Roman",12,Constants.C_BLACK,Constants.C_WHITE,Constants.FMT_BOLD | Constants.FMT_LEFT,0,0,0,0,0,0);
    ooutfile.DefineF("Heading 1", "Times New Roman",12,Constants.C_BLACK,Constants.C_WHITE,Constants.FMT_BOLD | Constants.FMT_LEFT,0,0,0,0,0,0);
    ooutfile.DefineF("Heading 2", "Times New Roman",12,Constants.C_BLACK,Constants.C_WHITE,Constants.FMT_BOLD | Constants.FMT_LEFT,0,0,0,0,0,0);
    ooutfile.DefineF("Heading 3", "Times New Roman",12,Constants.C_BLACK,Constants.C_WHITE,Constants.FMT_BOLD | Constants.FMT_LEFT,0,0,0,0,0,0);
    ooutfile.DefineF("Heading 4", "Times New Roman",12,Constants.C_BLACK,Constants.C_WHITE,Constants.FMT_BOLD | Constants.FMT_LEFT,0,0,0,0,0,0);
    ooutfile.DefineF("Heading 5", "Times New Roman",12,Constants.C_BLACK,Constants.C_WHITE,Constants.FMT_BOLD | Constants.FMT_LEFT,0,0,0,0,0,0);
    ooutfile.DefineF("Heading 6", "Times New Roman",12,Constants.C_BLACK,Constants.C_WHITE,Constants.FMT_BOLD | Constants.FMT_LEFT,0,0,0,0,0,0);
    ooutfile.DefineF("Heading 7", "Times New Roman",12,Constants.C_BLACK,Constants.C_WHITE,Constants.FMT_BOLD | Constants.FMT_LEFT,0,0,0,0,0,0);
    ooutfile.DefineF("Heading 8", "Times New Roman",12,Constants.C_BLACK,Constants.C_WHITE,Constants.FMT_BOLD | Constants.FMT_LEFT,0,0,0,0,0,0);
    ooutfile.DefineF("Heading 9", "Times New Roman",12,Constants.C_BLACK,Constants.C_WHITE,Constants.FMT_BOLD | Constants.FMT_LEFT,0,0,0,0,0,0);
    ooutfile.DefineF("TableTop", "Times New Roman",10,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_BOLD | Constants.FMT_CENTER,0,0,0,0,0,1);
    ooutfile.DefineF("TableEnd", "Times New Roman",13,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_BOLD | Constants.FMT_CENTER,0,0,0,0,0,1);
    ooutfile.DefineF("TableLeftEnd", "Times New Roman",13,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_BOLD | Constants.FMT_LEFT,0,0,0,0,0,1);
    ooutfile.DefineF("TableBottom", "Times New Roman",10,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_BOLD | Constants.FMT_LEFT,0,0,0,0,0,1);
    //AS20160201
    ooutfile.DefineF("TableBottom2", "Times New Roman",10,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_UNDERLINE | Constants.FMT_BOLD | Constants.FMT_LEFT,0,0,0,0,0,1);
    
    ooutfile.DefineF("TableMain", "Times New Roman",10,Constants.C_BLACK,Constants.C_WHITE,Constants.FMT_LEFT,0,0,0,0,0,1);
    ooutfile.DefineF("TableMain_2", "Times New Roman",10,Constants.C_BLACK,Constants.C_WHITE,Constants.FMT_JUSTIFY,0,0,0,0,0,1);
    ooutfile.DefineF("TableAttn", "Times New Roman",10,Constants.C_RED,Constants.C_WHITE,Constants.FMT_LEFT,0,0,0,0,0,1);
    ooutfile.DefineF("Header", "Times New Roman",15,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_CENTER,0,0,0,0,0,1);
    ooutfile.DefineF("HeaderMatrix", "Times New Roman",12,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_CENTER,0,0,0,0,0,1);
    ooutfile.DefineF("StringTable1", "Times New Roman",12,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_LEFT,0,0,0,0,0,1);
    ooutfile.DefineF("StringTable2", "Times New Roman",12,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_CENTER,0,0,0,0,0,1);
    ooutfile.DefineF("Footer", "Times New Roman",12,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_CENTER,0,0,0,0,0,1);
    ooutfile.DefineF("Title 1", "Times New Roman",15,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_LEFT,95,0,0,0,0,1);      
    ooutfile.DefineF("Title 2", "Times New Roman",15,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_RIGHT,0,0,0,0,0,0);
    ooutfile.DefineF("Title 3", "Times New Roman",15,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_CENTER,0,0,0,0,0,1);
    ooutfile.DefineF("Title 4", "Times New Roman",15,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_LEFT,95,0,0,0,0,1);
    ooutfile.DefineF("Title 5", "Times New Roman",14,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_JUSTIFY,0,0,0,0,0,1);
    
    if (ogroupmodels.length > 0) {
        userdialog();
        if (bcheckuserdialog) {
            title(); 
            
            if (osinglemodel.Type()== txtTypeDiagram) {
                // если VAD
                OutputModels(true,osinglemodel,groupfuncobjects[0].ObjDef(),ogroupmodels,0,ident,identBool);
            } else {
                OutputModels(true,osinglemodel,groupfuncobjects[0].ObjDef(),ogroupmodels,0,ident, identBool);
            }			
            //ooutfile.OutputField(Constants.FIELD_NEWSECTION,"Times New Roman",6,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_CENTER);
            
            BuildMatrixAgreement();
            CrtTotFuncTable();
            ooutfile.WriteReport(Context.getSelectedPath(), Context.getSelectedFile());
        } else {
            Context.setScriptError(Constants.ERR_NOFILECREATED);
        }
    } else {
        Dialogs.MsgBox("Выберите, пожалуйста, модель",Constants.MSGBOX_BTN_OK,"ARIS Report");
        Context.setScriptError(Constants.ERR_NOFILECREATED);  
    }  
}

function title()
{  
    var txtCity = getString ("TEXT_5"); // город
   
   // Вывод приказа для ЛПА
    ooutfile.BeginSection(false, Constants.SECTION_COVER);
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("Об утверждении Регламента","Title 5");
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("            В целях надлежащей организации работы в ОАО «Белагропромбанк», развития процессного управления,","Title 5");
    ooutfile.OutputLnF("ПРИКАЗЫВАЮ:","Title 5"); 
    ooutfile.OutputLnF("            1. Утвердить прилагаемый Регламент бизнес-процесса «"+osinglemodel.Name(g_nloc)+
    "» (далее – Регламент) и установить, что он вступает в силу с момента утверждения.","Title 5");         
    ooutfile.OutputLnF("            2. Руководителям структурных подразделений центрального аппарата и региональных дирекций"+
    " ОАО «Белагропромбанк» довести Регламент до заинтересованных.","Title 5");
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("Председатель Правления	                             А.А.Лысюк","Title 5");
    ooutfile.EndSection();
    
    // Вывод титульного листа
    ooutfile.BeginSection(false, Constants.SECTION_COVER);
    ooutfile.OutputLnF("УТВЕРЖДЕНО","Title 1");
    ooutfile.OutputLnF("Приказ","Title 4");
    ooutfile.OutputLnF("ОАО «Белагропромбанк»","Title 4"); 
    ooutfile.OutputLnF("___.___.______ № ____","Title 4");         
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("","Title 2");                
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("БИЗНЕС-МОДЕЛЬ","Title 2");                
    ooutfile.OutputLnF("ОАО \«Белагропромбанк\»","Title 2");                
    ooutfile.OutputLnF("\«как есть\»","Title 2");
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("Регламент бизнес-процесс","Title 2");                
    ooutfile.OutputLnF("","Title 2");             
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF (osinglemodel.Name(g_nloc),"Header"); // выводим на титульном листе название модели
    ooutfile.OutputLnF("","Title 2");                
    ooutfile.OutputLnF("","Title 2");             
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("","Title 2");             
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("","Title 2");
    ooutfile.OutputLnF("","Title 2");                
    ooutfile.OutputLnF(txtCity,"Title 3");             
    ooutfile.OutputLnF(txtCurrentYear,"Title 3");       
    ooutfile.EndSection();
    
    ToC(ooutfile);
    Footer(ooutfile);
    // вставка нового раздела для терминов и определений
    //ooutfile.OutputField(Constants.FIELD_NEWSECTION,"Times New Roman",6,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_CENTER);
    ooutfile.BeginSection(true, Constants.SECTION_DEFAULT);
    Footer(ooutfile);
    ooutfile.OutputLnF("Основные термины и определения", "Heading 1");
    // вставка нового раздела функциональных ролей
    ooutfile.OutputField(Constants.FIELD_NEWSECTION,"Times New Roman",6,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_CENTER); 
    Footer(ooutfile);
    ooutfile.OutputLnF("Функциональные роли участников бизнес-процесса", "Heading 1");
    // вставка нового раздела для перечня нормативных документов
    ooutfile.OutputField(Constants.FIELD_NEWSECTION,"Times New Roman",6,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_CENTER);
    Footer(ooutfile);
    ooutfile.OutputLnF("Перечень нормативных документов", "Heading 1");
    //ooutfile.OutputField(Constants.FIELD_NEWSECTION,"Times New Roman",6,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_CENTER);
    ooutfile.EndSection();
}    

function userdialog()
{
    
    var bInput = false ;	
    var listbox = new Array(1,2,3,4,5,6,7,8,9); 
    var txtDialogTitle = getString ("TEXT_3"); // Название диалогового пользовательского окна    
    var dialoglogo = Context.getFile("LogoAPB.JPG",Constants.LOCATION_COMMON_FILES);
    
    var userdialog = Dialogs.createNewDialogTemplate(600, 170, txtDialogTitle);
    userdialog.Picture(1,2,220,25, "LOGO");    
    userdialog.CheckBox(50,30,520,14,"Выводить в отчет вложенную модель, на которую ссылается PI и в поле TEXT IN", "Check1");
    userdialog.CheckBox(50,45,490,14,"Выводить в отчет таблицу уровня автоматизации БП", "Check2");
    userdialog.CheckBox(50,60,490,14, "Выводить в отчет итоговую таблицу степени автоматизации БП", "Check3");
    userdialog.CheckBox(50,75,490,14, "Выводить список детализирующих моделей - модели VAD", "Check4");
    userdialog.CheckBox(50,90,490,14, "Выводить только функции, требующие автоматизации", "Check5");
    userdialog.Text(50,118,320,14,"Количество экспертов (включая владельца)");
    userdialog.ComboBox(325,120,55,16,listbox ,"Text0");
    userdialog.Text(50,138,335,14,"Стартовый номер подпроцесса");
    userdialog.TextBox(327,140,70,16, "Text1", 0);
    userdialog.OKButton();
    userdialog.CancelButton();
    
    dlgGroupInfo = Dialogs.createUserDialog(userdialog);
    dlgGroupInfo.setDlgPicture("LOGO", dialoglogo, 1);
    dlgGroupInfo.setDlgValue(1, true);
    dlgGroupInfo.setDlgValue(2, false);
    dlgGroupInfo.setDlgValue(3, false);
    dlgGroupInfo.setDlgValue(4, true);
    dlgGroupInfo.setDlgText(7,"1");
    dlgGroupInfo.setDlgText(9,"1.");
    
    var nuserdialog=Dialogs.show(dlgGroupInfo);
    
    if (nuserdialog != 0) {
        bcheckuserdialog = true;    
        expertnum=dlgGroupInfo.getDlgText("Text0");
        expertnum++;
        ident=dlgGroupInfo.getDlgText("Text1");
        bpicheck=(dlgGroupInfo.getDlgValue("Check1") == 1);
        bcheck2=(dlgGroupInfo.getDlgValue("Check2") == 1);
        bcheck3=(dlgGroupInfo.getDlgValue("Check3") == 1);
        bcheck4=(dlgGroupInfo.getDlgValue("Check4") == 1);
        bcheck5=(dlgGroupInfo.getDlgValue("Check5") == 1);
    } else {bcheckuserdialog=false;}
}   

/* Функция для построения таблицы. В качестве входящего праметра передается объект типа модель */
function MakeTable(omodel) {
    
    var oobjoccfunclist = omodel.ObjOccListFilter(Constants.OT_FUNC); // список экземпляров типа функция в моделе     
    
    var	k = 1;               // порядковый номер строк в таблице
    var shouldavtfunc = 0;   // кол-во функций требующих автоматизации
    var noavtfunc = 0;       // кол-во функций неавтоматизированных
    var avtfunc = 0;         // кол-во функций автоматизированных
    var controlfunc = 0;     // кол-во контрольных функций
    
    var ofuncocc = null;     // единичный экземпляр типа функция
    var omodelslist = new Array();  // список моделей
    var	oposlist = new Array();     // список экземпляров типа исполнитель
    var oapplist = new Array();     // список экземпляров типа информационная система
    var ocolor = 0;          // заливка экземпляров типа функция
    
    var oinpcxnlist = new Array();    // список входящих экземпляров направленных к функции
    var ooutcxnlist = new Array();    // список исходящих экземпляров направленных от функции
    
    
    var oinpdococclist = new Array(); // массив входящих представлений документов для данного экземпляра функции	
    var ooutdococclist = new Array(); // массив исходящих представлений документов для данного экземпляра функции	
    
    
    var seventinplist = new Array();  // список экземпляров событий, напрвленных к функции
    var seventoutlist = new Array();  // список экземпляров событий, направленных от функции
    
    // сортируем экземпляры функций по расстоянию от левого верхнего угла модели
    oobjoccfunclist = ArisData.sort(oobjoccfunclist, Constants.AT_HIER_NUM, Constants.SORT_GEOMETRIC, g_nloc);
    
    omodel.BuildGraph(true); //  строим граф модели для вызова функции MakeEventChain
    
    // Вывод заголовка и шапки таблицы
    if (ocurrentobj != null) {
        ooutfile.OutputLn("Таблица. " + ocurrentobj.Name(g_nloc), "Times New Roman",12,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_BOLD | Constants.FMT_LEFT,0);
    } else {
        ooutfile.OutputLn("Таблица. " + omodel.Name(g_nloc), "Times New Roman",12,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_BOLD | Constants.FMT_LEFT,0);
    }
    ooutfile.BeginTable(100,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_LEFT | Constants.FMT_JUSTIFY,0); // открываем таблицу
    ooutfile.TableRow(); // добавляем строку
    ooutfile.TableCellF("№\nп/п",2.4,"TableTop"); // вывод номера строки стилем "TableTop"
   // ooutfile.TableCellF("Условие выполнения",15.1,"TableTop"); // вывод условия выполнения функции (стартовое событие)
    ooutfile.TableCellF("Функция",13.6,"TableTop"); // вывод названия функции
    ooutfile.TableCellF("Исполнитель",11.2,"TableTop"); // вывод исполнителя
    ooutfile.TableCellF("Входящие документы",17.6,"TableTop");    // вывод входящих документов
    ooutfile.TableCellF("Исходящие документы",17.6,"TableTop");   // вывод исходящих документов
    ooutfile.TableCellF("Информационная система",7.4,"TableTop"); // вывод информационных систем
    ooutfile.TableCellF("Результат выполнения",15.1,"TableTop"); // вывод результата выполнения функции
    ooutfile.TableCellF("Время выполнения ",10.0,"TableTop"); // вывод времени выполнения функции
    ooutfile.TableCellF("След. функция",5.1,"TableTop"); // вывод следующей ????? функции !!!!!!!!!!!!!
    
    for (var i = 0; i < oobjoccfunclist.length; i++) {
        ofuncocc =  oobjoccfunclist[i];
        if (ofuncocc.SymbolName() != "Операция") { 				
            
            // рассматриваем все связи, направленные к функции
            oinpcxnlist = ofuncocc.InEdges (Constants.EDGES_ALL);
            for (var j = 0; j < oinpcxnlist.length; j++) {
                switch (oinpcxnlist[j].SourceObjOcc().ObjDef().TypeNum()) {
                    //  исполнитель (организационная единица, должность, группа, персона, person type)  
                    case Constants.OT_ORG_UNIT:
                    case Constants.OT_POS:
                    case Constants.OT_GRP:
                    case Constants.OT_ORG_UNIT_TYPE:
                    case Constants.OT_PERS:
                    case Constants.OT_PERS_TYPE:
                    oposlist.push(oinpcxnlist[j].SourceObjOcc()); 
                    break;
                    case Constants.OT_APPL_SYS_TYPE:
                    case Constants.OT_APPL_SYS:
                    case Constants.OT_APPL_SYS_CLS:
                    // информационная система
                    oapplist.push(oinpcxnlist[j].SourceObjOcc());
                    break;
                    case Constants.OT_INFO_CARR:
                    // входящие экземпляры документов
                    oinpdococclist.push(oinpcxnlist[j].SourceObjOcc()); 			
                } 		
            }
            
            oposlist = ArisData.sort(oposlist, Constants.SORT_GEOMETRIC, g_nloc);  // сортировка исполнителей по расстоянию от левого верхнего угла
            oapplist = ArisData.sort(oapplist, Constants.SORT_GEOMETRIC, g_nloc);  // сортировка информационных систем по расстоянию от левого верхнего угла
            oinpdococclist = ArisData.sort(oinpdococclist, Constants.AT_HIER_NUM, Constants.SORT_GEOMETRIC, g_nloc); // сортировка по расстоянию от левого верхнего угла
            
            for ( j = 0; j < oinpdococclist.length; j++) {
                oinpobjocclist.push(oinpdococclist[j]); // добавляем входящие экземпляра документов
                MakeObjList(oinpdococclist[j], true); // добавляем проводки и статусы в общий список объектов
            }
            
            // рассматриваем все связи, направленные от функции
            ooutcxnlist = ofuncocc.OutEdges (Constants.EDGES_ALL);
            for (j = 0; j < ooutcxnlist.length; j++) {
                switch (ooutcxnlist[j].TargetObjOcc().ObjDef().TypeNum()) { 
                    case Constants.OT_INFO_CARR:			
                    ooutdococclist.push(ooutcxnlist[j].TargetObjOcc()); // добавляем исходящие экземпляры документов				
                }
            }
            
            ooutdococclist = ArisData.sort(ooutdococclist, Constants.AT_HIER_NUM, Constants.SORT_GEOMETRIC, g_nloc); // сортировка по расстоянию от левого верхнего угла
            for (j = 0; j < ooutdococclist.length; j++) {
                ooutobjocclist.push(ooutdococclist[j]); // добавляем исходящие экземпляры документов
                MakeObjList(ooutdococclist[j], false); // добавляем проводки и статусы в общий список объектов
            }	
            
            // получаем список входящих событий
            seventinplist = MakeEventChain(omodel, ofuncocc, true);
            // получаем список исходящих событий
            seventoutlist = MakeEventChain(omodel, ofuncocc, false);
            
            // если по функции есть описание	
            discr="";
            if (ofuncocc.ObjDef().Attribute(Constants.AT_DESC,g_nloc).GetValue(true).toString() != "") {
                discr="*";
            }
            
            /* проверяем является ли данная функция составной или "Process interface"(без вложения), 
            если да, то выводим соответствующее инфо в описание функции */
            omodelslist = oobjoccfunclist[i].ObjDef().AssignedModels();
            strname2="";
            if (omodelslist.length > 0 || oobjoccfunclist[i].SymbolName() == "Интерфейс процесса") {
                discr = "*";
                strname2 = "Подпроцесс (функция) имеет вложенную детализацию и представлен (-на) отдельной моделью.";
            }        
            
            // определяем тип функции
            ocolor = ofuncocc.getColor();
            switch (ocolor) {
                // автоматизированные функции (зеленые)  
                case 9895830:
                case 10025880:   
                avtfunc++;
                totavtfunc++;
                break;
                // неавтоматизированные функции (голубые)
                case 9895935:
                case 16777088:
                case 15658671:
                case 13959039:
                case 16777152:   
                noavtfunc++;
                totnoavtfunc++;
                break;
                // следует автоматизировать (желтые)  
                case 0xFFFF96: 
                shouldavtfunc++;
                totshldavtfunc++;
            }
            
            if (ofuncocc.SymbolName() == "Функция SAP") controlfunc++; // контролирующие функции
            
            if (bcheck5 == true) {
                if (ocolor ==  0xFFFF96) {   
                    // Выводим строки в таблице
                    ooutfile.TableRow();
                    ooutfile.TableCellF((k++).toString(),2.4,"TableMain"); // вывод номера стилем "TableMain"
                 //   ooutfile.TableCellF(seventinplist,15.1,"TableMain"); // вывод входящих событий
                    // B AS20160201
                    switch (ocolor) {
                        case 0xFFFF96:
                        ooutfile.TableCellF(ofuncocc.ObjDef().Name(g_nloc).trim() + discr,13.6,"TableBottom2"); // функции требующие автоматизации выделяются жирным шрифтом с подчеркиванием
                        break;
                        default:
                        ooutfile.TableCellF(ofuncocc.ObjDef().Name(g_nloc).trim() + discr,13.6,"TableBottom"); // остальные функции
                    }
                    // E AS20160201
                    ooutfile.TableCellF(MakeList(oposlist),11.2,"TableMain"); // список исполнителей (если больше одного)
                    ooutfile.TableCellF(MakeOccList(oinpobjocclist),17.6,"TableMain"); // список входящих документов
                    ooutfile.TableCellF(MakeOccList(ooutobjocclist),17.6,"TableMain"); // список исходящих документов
                    ooutfile.TableCellF(MakeList(oapplist),7.4,"TableMain"); // список информационных систем
                    ooutfile.TableCellF(seventoutlist,15.1,"TableMain"); // вывод исходящих событий
                     ooutfile.TableCellF(ofuncocc.ObjDef().Attribute(Constants.AT_TIME_PRCS_AVG,g_nloc).getValue().toString(),10.0,"TableTop"); // вывод времени выполнения функции
                     ooutfile.TableCellF("nextF",5.1,"TableTop"); // вывод следующей ????? функции !!!!!!!!!!!!!
                    if (ofuncocc.ObjDef().Attribute(Constants.AT_DESC,g_nloc).GetValue(true).toString() != ""  || discr.toString() != "") { 
                        ooutfile.TableRow();
                        str2 = ofuncocc.ObjDef().Attribute(Constants.AT_DESC,g_nloc).GetValue(true).toString();
                        bstrdesc = strRegExp.Search(str2);
                        if (bstrdesc) {
                            ooutfile.TableCellF("*"+strname2,100,"TableMain_2"); //описание  
                        } else {
                            ooutfile.TableCellF("*"+strname2+(strname2 == "" ? "" : " ")+ofuncocc.ObjDef().Attribute(Constants.AT_DESC,g_nloc).GetValue(true).toString().trim(),100,"TableMain_2"); //описание
                        }
                    }
                }
                
            } else {
                // Выводим строки в таблице
                ooutfile.TableRow();
                ooutfile.TableCellF((k++).toString(),2.4,"TableMain"); // вывод номера стилем "TableMain"
               // ooutfile.TableCellF(seventinplist,15.1,"TableMain"); // вывод входящих событий
                // B AS20160201
                switch (ocolor) {
                    case 0xFFFF96:
                    ooutfile.TableCellF(ofuncocc.ObjDef().Name(g_nloc).trim() + discr,13.6,"TableBottom2"); // функции требующие автоматизации выделяются жирным шрифтом с подчеркиванием
                    break;
                    default:
                    ooutfile.TableCellF(ofuncocc.ObjDef().Name(g_nloc).trim() + discr,13.6,"TableBottom"); // остальные функции
                }
                // E AS20160201
                ooutfile.TableCellF(MakeList(oposlist),11.2,"TableMain"); // список исполнителей (если больше одного)
                ooutfile.TableCellF(MakeOccList(oinpobjocclist),17.6,"TableMain"); // список входящих документов
                ooutfile.TableCellF(MakeOccList(ooutobjocclist),17.6,"TableMain"); // список исходящих документов
                ooutfile.TableCellF(MakeList(oapplist),7.4,"TableMain"); // список информационных систем
                ooutfile.TableCellF(seventoutlist,15.1,"TableMain"); // вывод исходящих событий
                  ooutfile.TableCellF(ofuncocc.ObjDef().Attribute(Constants.AT_TIME_PRCS_AVG,g_nloc).getValue().toString(),10.0,"TableTop"); // вывод времени выполнения функции
                  ooutfile.TableCellF("nextF",5.1,"TableTop"); // вывод следующей ????? функции !!!!!!!!!!!!!
                  
                if (ofuncocc.ObjDef().Attribute(Constants.AT_DESC,g_nloc).GetValue(true).toString() != ""  || discr.toString() != "") { 
                    ooutfile.TableRow();
                    str2 = ofuncocc.ObjDef().Attribute(Constants.AT_DESC,g_nloc).GetValue(true).toString();
                    bstrdesc = strRegExp.Search(str2);
                    if (bstrdesc) {
                        ooutfile.TableCellF("*"+strname2,100,"TableMain_2"); //описание 
                    } else {
                        ooutfile.TableCellF("*"+strname2+(strname2 == "" ? "" : " ")+ofuncocc.ObjDef().Attribute(Constants.AT_DESC,g_nloc).GetValue(true).toString().trim(),100,"TableMain_2"); //описание
                    }
                }
                
            }
            
        } // end if	
        oposlist = new Array();
        oinpobjocclist = new Array(); 
        ooutobjocclist = new Array();
        oapplist = new Array();
        oinpdococclist = new Array();
        ooutdococclist = new Array();
    } // end for
    
    if (bcheck5 != true) {
        ooutfile.TableRow();
        ooutfile.TableCellF("Всего автоматизированных функций",84.9,"TableBottom");
        ooutfile.TableCellF(avtfunc.toString(),15.1,"TableTop");
    }
    
    if (shouldavtfunc > 0) {
        ooutfile.TableRow();
        ooutfile.TableCellF("Всего функций, требующих автоматизации",84.9,"TableBottom");
        ooutfile.TableCellF(shouldavtfunc.toString(),15.1,"TableTop");
    }
    if (bcheck5 != true) {
        ooutfile.TableRow();
        ooutfile.TableCellF("Всего неавтоматизированных функций",84.9,"TableBottom");
        ooutfile.TableCellF(noavtfunc.toString(),15.1,"TableTop");
        
        if (controlfunc > 0) {
            ooutfile.TableRow();
            ooutfile.TableCellF("В том числе контрольных функций",84.9,"TableBottom");
            ooutfile.TableCellF(controlfunc.toString(),15.1,"TableTop");
        }
    }
    // закрываем таблицу
    ooutfile.EndTable("",100, "Arial",11,Constants.C_BLACK,Constants.C_TRANSPARENT,0,Constants.FMT_LEFT | Constants.FMT_JUSTIFY,0);
}    

// Функиця формирует список событий, разделенных логическими операторами
function MakeEventChain(omodel, otopocc, bup) {
    
    var oocceventlist = new Array(); // список экземпляров событий исходящих (входящих) от (к) функции
    var makeeventchain = "";
    var i = 0;
    
    if (bup == true) { 
        oocceventlist = omodel.GetPredNodes(otopocc); // для входных событий
    } else {
        oocceventlist = omodel.GetSuccNodes(otopocc); // для исходящих событий
    }
    oocceventlist = ArisData.sort(oocceventlist, Constants.SORT_GEOMETRIC, g_nloc); // сортировка экземпляров событий по расстоянию от верхнего левого угла
    
    if (oocceventlist.length == 0) return makeeventchain;
    
    if (otopocc.ObjDef().TypeNum() == Constants.OT_RULE && oocceventlist.length > 1)  makeeventchain = "(" ;  // если текущий объект - оператор, начинаем построение списка событий
    
    do {   
        switch (oocceventlist[i].ObjDef().TypeNum()) {
            case Constants.OT_RULE:
            if (i > 0) makeeventchain += operatorstr(otopocc.SymbolNum());
            makeeventchain += MakeEventChain(omodel, oocceventlist[i], bup);
            break;
            case Constants.OT_EVT:
            if (i > 0) makeeventchain += operatorstr(otopocc.SymbolNum());
            makeeventchain += oocceventlist[i].ObjDef().Name(g_nloc).trim();
        }
        i++;
    } while (i < oocceventlist.length);
    
    if (otopocc.ObjDef().TypeNum() == Constants.OT_RULE && oocceventlist.length > 1) makeeventchain += ")"; // если текущий объект - оператор завершаем список событий
    //   Dialogs.MsgBox(makeeventchain,Constants.MSGBOX_BTN_OK,"ARIS Report");
    return makeeventchain;
}    

function operatorstr(symbolnum) {
    
    var srulestr = "";
    
    switch (symbolnum) { // определяем тип оператора
        case Constants.ST_OPR_XOR_1:
        srulestr = " <или> ";
        break;
        case Constants.ST_OPR_OR_1:
        srulestr = " <и(или)> ";
        break;
        case Constants.ST_OPR_AND_1:
        srulestr = " <и> ";
        break;
        case Constants.ST_XOR_AND:
        srulestr = " <или> ";
        break;
        case Constants.ST_XOR_OR:
        srulestr = " <или> ";
        break;
        case Constants.ST_AND_OR:
        srulestr = " <и> ";
        break;
        case Constants.ST_AND_XOR:
        srulestr = " <и> ";
        break;
        case Constants.ST_OR_AND:
        srulestr = " <и(или)> ";
        break;
        case Constants.ST_OR_XOR:
        srulestr = " <и(или)> ";
    }
    return srulestr;
}

function MakeList(oobjocclist) {    
    var makelist = "";
    
    if (oobjocclist != null) {
        switch (oobjocclist.length) {
            case 0:
            break;
            case 1:
            makelist = oobjocclist[0].ObjDef().Name(g_nloc);
            break;
            default:
            for (j = 0; j < oobjocclist.length; j++) {
                if (makelist != "") makelist += "\n"; //переход на новую строку после каждого элемента списка 
                makelist += (j + 1).toString() + ") " + oobjocclist[j].ObjDef().Name(g_nloc); 
                if (j < oobjocclist.length - 1) makelist += ";"; // точка с запятой после каждого элемента, кроме последнего
            }	
        }
    } 
    return makelist;
}

function MakeOccList(oocclist) {
    var k = 1;
    var makeocclist = "";
    
    if (oocclist == 0) return makeocclist; // если массив пустой, возвращает пустую строку 
    
    // если массив состоит из одного элемента, возвращает название этого элемента
    if (oocclist.length == 1){
        var symbolname=oocclist[0].SymbolName();
        switchnum=3;
        if  (symbolname ==  getString("TEXT_2")) switchnum =1;
        if  (symbolname ==  "Файл") switchnum =2;
        switch (switchnum) {
            case 1:{
                makeocclist = ed + " - " + oocclist[0].ObjDef().Name(g_nloc);
                break;
            }  
            case 2:{
                makeocclist = "Файл - " + oocclist[0].ObjDef().Name(g_nloc);
                break;
            }
            default:
            makeocclist = oocclist[0].ObjDef().Name(g_nloc);
        }
        if (oocclist[0].ObjDef().Attribute(Constants.AT_DESC,g_nloc).GetValue(true).toString() != "") { 
            makeocclist += "\n" + "("+ oocclist[0].ObjDef().Attribute(Constants.AT_DESC,g_nloc).GetValue(true).toString() + ")"; 
        }	
        return makeocclist;
    }
    
    //  если массив состоит из нескольких элементов 
    for (var jj = 0; jj < oocclist.length; jj++) {
        // вывод документа, если за ним проводка либо статус
        if ((jj < oocclist.length - 1) && (oocclist[jj].SymbolName() != "Операция") && (oocclist[jj].SymbolName() != "Технический термин") && (oocclist[jj].SymbolName() != "Атрибут")) {
            if (oocclist[jj+1].SymbolName() == "Операция") {
                var symbolname=oocclist[jj].SymbolName();
                switchnum = 3;
                if  (symbolname ==  getString("TEXT_2")) switchnum =1;
                if  (symbolname ==  "Файл") switchnum =2;   
                switch (switchnum) {
                    case 1:{
                        makeocclist += k.toString() + ") " + ed + " - " +oocclist[jj].ObjDef().Name(g_nloc) + "\n";
                        break;
                    }  
                    case 2:{
                        makeocclist += k.toString() + ") " + "Файл - " +oocclist[jj].ObjDef().Name(g_nloc) + "\n";
                        break;
                    }				
                    default:			
                    makeocclist += k.toString() + ") " + oocclist[jj].ObjDef().Name(g_nloc) + "\n";
                }
                // Вывод Definition Документа
                if (oocclist[jj].ObjDef().Attribute(Constants.AT_DESC,g_nloc).GetValue(true).toString() != "") { 
                    makeocclist += "("+ oocclist[jj].ObjDef().Attribute(Constants.AT_DESC,g_nloc).GetValue(true).toString() + ");" + "\n";
                }
                makeocclist += "(";
                k++;
            }	
            if ((oocclist[jj+1].SymbolName() == "Технический термин") || (oocclist[jj+1].SymbolName() == "Атрибут")) {
                var symbolname=oocclist[jj].SymbolName();
                switchnum=3;
                if  (symbolname ==  getString("TEXT_2")) switchnum =1;
                if  (symbolname ==  "Файл") switchnum =2;  
                switch (switchnum) {
                    case 1:{
                        makeocclist += k.toString() + ") " + ed + " - " +oocclist[jj].ObjDef().Name(g_nloc) + "\n";
                        break;
                    }    
                    case 2:{
                        makeocclist += k.toString() + ") " + "Файл - " +oocclist[jj].ObjDef().Name(g_nloc) + "\n";
                        break;
                    } 				
                    default:			
                    makeocclist += k.toString() + ") " + oocclist[jj].ObjDef().Name(g_nloc) + "\n";
                }
                // Вывод Definition Документа
                if (oocclist[jj].ObjDef().Attribute(Constants.AT_DESC,g_nloc).GetValue(true).toString() != "") {
                    makeocclist += "("+ oocclist[jj].ObjDef().Attribute(Constants.AT_DESC,g_nloc).GetValue(true).toString() + ")" + "\n";
                }
                k++;
            }
        }
        // вывод документа, если за ним документ
        if ((jj < oocclist.length - 1) && (oocclist[jj].SymbolName() != "Операция") && (oocclist[jj].SymbolName() != "Технический термин") && (oocclist[jj].SymbolName() != "Атрибут")) {
            if ((oocclist[jj+1].SymbolName() != "Операция") && (oocclist[jj+1].SymbolName() != "Технический термин") && (oocclist[jj+1].SymbolName() != "Атрибут")) {
                var symbolname=oocclist[jj].SymbolName();
                switchnum=3;
                if  (symbolname ==  getString("TEXT_2")) switchnum =1;
                if  (symbolname ==  "Файл") switchnum =2;   
                switch (switchnum) {
                    case 1:{
                        makeocclist += k.toString() + ") " + ed + " - " +oocclist[jj].ObjDef().Name(g_nloc) + "; " + "\n";
                        break;
                    }  
                    case 2:{
                        makeocclist += k.toString() + ") " + "Файл - " +oocclist[jj].ObjDef().Name(g_nloc) + "; " + "\n";
                        break;
                    }				
                    default:			
                    makeocclist += k.toString() + ") " + oocclist[jj].ObjDef().Name(g_nloc) + "; " + "\n";
                }
                // Вывод Definition Документа
                if (oocclist[jj].ObjDef().Attribute(Constants.AT_DESC,g_nloc).GetValue(true).toString() != "") { 
                    makeocclist += "("+ oocclist[jj].ObjDef().Attribute(Constants.AT_DESC,g_nloc).GetValue(true).toString() + ");" + "\n";
                }				
                k++;
            }		
        }	
        // вывод последнего объекта в списке в случае, если это документ
        if ((jj == oocclist.length - 1) && (oocclist[jj].SymbolName() != "Операция") && (oocclist[jj].SymbolName() != "Технический термин") && (oocclist[jj].SymbolName() != "Атрибут")) {
            var symbolname=oocclist[jj].SymbolName();
            switchnum=3;
            if  (symbolname ==  getString("TEXT_2")) switchnum =1;
            if  (symbolname ==  "Файл") switchnum =2;    
            switch(switchnum) {
                case 1:{
                    makeocclist += k.toString() + ") " + ed + " - " + oocclist[jj].ObjDef().Name(g_nloc); // вывод без символа перевода строки
                    break;
                }  
                case 2:{
                    makeocclist += k.toString() + ") " + "Файл - " + oocclist[jj].ObjDef().Name(g_nloc); // вывод без символа перевода строки
                    break;
                }  
                default:			
                makeocclist += k.toString() + ") " + oocclist[jj].ObjDef().Name(g_nloc); // вывод без символа перевода строки
            }
            // Вывод Definition Документа
            if (oocclist[jj].ObjDef().Attribute(Constants.AT_DESC,g_nloc).GetValue(true).toString() != "") { 
                makeocclist += "("+ oocclist[jj].ObjDef().Attribute(Constants.AT_DESC,g_nloc).GetValue(true).toString() + ")" + "\n";
            }
        }	
        
        // вывод проводки, если за ней проводка либо другой объект
        if ((jj < oocclist.length - 1) && (oocclist[jj].SymbolName() == "Операция")) {
            if (oocclist[jj+1].SymbolName() == "Операция") {
                makeocclist += oocclist[jj].ObjDef().Name(g_nloc) + "; " + "\n";
            } else {
                makeocclist += oocclist[jj].ObjDef().Name(g_nloc) + "); " + "\n";
            }			
        }
        // вывод последнего объекта в списке в случае, если это проводка		
        if ((jj == oocclist.length - 1) && (oocclist[jj].SymbolName() == "Операция")) { 		
            makeocclist += oocclist[jj].ObjDef().Name(g_nloc) + ")";											
        }
        // вывод статуса
        if (((jj < oocclist.length - 1) && (oocclist[jj].SymbolName() == "Технический термин")) || ((jj < oocclist.length - 1) && (oocclist[jj].SymbolName() == "Атрибут"))) {
            strname= rtrim(oocclist[jj].ObjDef().Name(g_nloc));
            lastchar = strname.substr(strname.lentgth-1, strname.length-1);
            
            //AB20161122  2. Изменен вывод объектов типа атрибут без символов " - " и ";" 
            /*	if (lastchar != ";") {
                makeocclist += " - " + strname + ";" + "\n";
            } else {
                makeocclist += " - " + strName + "\n";
            }
  }
  if  ( ((jj == oocclist.length - 1) && (oocclist[jj].SymbolName() == "Технический термин"))  || ((jj == oocclist.length - 1) && (oocclist[jj].SymbolName() == "Атрибут") ) ) {
      strname = rtrim(oocclist[jj].ObjDef().Name(g_nloc));
      makeocclist += " - " + strname; // вывод без символа перевода строки
  }   
  */      
  if ((lastchar != ";") && (oocclist[jj].SymbolName() != "Атрибут")) {
      makeocclist += " - " + strname + ";" + "\n";
  }
  
  if ((lastchar == ";") && (oocclist[jj].SymbolName() != "Атрибут")) {
      makeocclist += " - " + strName + "\n";
  }
  
  if  (oocclist[jj].SymbolName() == "Атрибут") {
      makeocclist +=  strname + "\n";
  }
  
        }
        if   ((jj == oocclist.length - 1) && (oocclist[jj].SymbolName() == "Атрибут"))  {
            strname = rtrim(oocclist[jj].ObjDef().Name(g_nloc));
            makeocclist += strname; // вывод атрибута без " - " и символа перевода строки
        }   
        //AB20161122 End   
        
        if  ((jj == oocclist.length - 1) && (oocclist[jj].SymbolName() == "Технический термин")) {
            strname = rtrim(oocclist[jj].ObjDef().Name(g_nloc));
            makeocclist += " - " + strname; // вывод без символа перевода строки
        }   
    } // Next jj
    return makeocclist;
}


// Удаление незначащих пробелов в начале и конце строки
function trim(b) {
    b.toString();
    return b.replace(/^\s+|\s+$/,"");
}

// Удаление незначащих пробелов в начале строки
function ltrim(b) {
    b.toString();
    return b.replace(/^\s+/,"");
}

// Удаление незначащих пробелов в конце строки
function rtrim(b) {
    b.toString();
    //   return b.replace(/\s+$/,"");
    return b.toString();
}

function OutputModels(first, omodel, oobjdef, omodellistall, ncurrentdepth, ident, identbool) {
    
    var oobjacclist = omodel.ObjOccListFilter(Constants.OT_FUNC); // список экземпляров объектов типа Function на данной модели       
    var omodelslist = null; // список моделей функции
    var pcount = 0; // количество моделей в общем списке после добавления новой модели в список
    var diff = 0; //разность после добавления модели в список и после упорядочивания
    var identcount = 0; // счетчик для названий детализирующих моделей 
    
    if (oobjacclist.length > 0) {
        if (identbool == true) {
            oobjacclist = ArisData.sort(oobjacclist, Constants.AT_HIER_NUM, Constants.SORT_GEOMETRIC, g_nloc); //сортировка по расстоянию до левого верхнего угла
        } else {
            // SortList oObjAccList, oObjdef  сортировка по идентификаторам
        }		
        
    /*    if (!(first == true) && !bstrdesc && (omodel.Type() == "EPC" || omodel.Type() == "Диаграмма окружения функций")) {
            // вставка нового раздела
            //    ooutfile.OutputField(Constants.FIELD_NEWSECTION,"Times New Roman",6,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_CENTER);
            ooutfile.BeginSection(false, Constants.SECTION_DEFAULT);
            LandscapePage(false, ooutfile);
            Footer(ooutfile);
            otablename = oobjdef; // AS28042012
            MakeTable(omodel);			
            // вставка нового раздела
            EndSection(ooutfile);
            //	ooutfile.OutputField(Constants.FIELD_NEWSECTION,"Times New Roman",6,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_CENTER);
            PortraitPage(false, ooutfile);
            Footer(ooutfile);
        }
  */
        // ----------Если это первый вызов на модели EPC, то выгружаем саму модель--------------------
        // в if добавлено oModel.Type()="Диаграмма цепочки добавленного качества"
  /*      if ((first == true) && (omodel.Type() == "EPC" || omodel.Type() == "Диаграмма окружения функций" || omodel.Type() == txtTypeDiagram)) {
            // вставка нового раздела
            //ooutfile.OutputField(Constants.FIELD_NEWSECTION,"Times New Roman",6,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_CENTER);
            // выводим название модели
            if (identbool == true) {
                // Убираем со стартовой VAD из наименования начальную нумерацию
                if (omodel.Type() == txtTypeDiagram) {
                    OutputModelNames(omodel.Name(g_nloc), ncurrentdepth);
                    firstcolmatrixagr.push(omodel.Name(g_nloc));
                } else {
                    OutputModelNames(ident+" "+omodel.Name(g_nloc), ncurrentdepth);
                    firstcolmatrixagr.push(ident+" "+omodel.Name(g_nloc));
                    
                }
            } else {
                OutputModelNames(omodel.Attribute(Constants.AT_ID,g_nloc).GetValue(true).toString()+" "+omodel.Name(g_nloc), ncurrentdepth);													             										
            }
            
            if ((bcheck4 == true && omodel.Type()== txtTypeDiagram) || omodel.Type()== "EPC") {
                // выводим названия детализирующих моделей
                Footer(ooutfile);
                MakeContents(omodel, oobjdef, ident, identbool);                                     
            }
            // формируем картинку
            opicture = omodel.Graphic(false,false,g_nloc);
            if (omodel.Flags() & Constants.MODEL_PRINT_LANDSCAPE) {
                ooutfile.BeginSection(false, Constants.SECTION_DEFAULT);
                LandscapePage(false, ooutfile);
                Footer(ooutfile);
                ooutfile.BeginParagraph(Constants.FMT_CENTER,0,0,0,0,0);
                ooutfile.OutGraphic(opicture,-1,257,150);
                ooutfile.EndParagraph();
                EndSection(ooutfile);
            } else {
                ooutfile.BeginSection(false, Constants.SECTION_DEFAULT);
                PortraitPage(false, ooutfile);
                Footer(ooutfile);
                ooutfile.BeginParagraph(Constants.FMT_CENTER,0,0,0,0,0);
                ooutfile.OutGraphic(opicture,-1,165,240);
                ooutfile.EndParagraph();
                EndSection(ooutfile);
            }
            // вставка нового раздела
            if (omodel.Type() == txtTypeDiagram) {
                ooutfile.OutputField(Constants.FIELD_NEWSECTION,"Times New Roman",6,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_CENTER);
            }
            
            if (!bstrdesc && (omodel.Type() == "EPC" || omodel.Type() == "Диаграмма окружения функций")) {
                // формируем таблицу
                //ooutfile.OutputLn("Функции, требующие доработки, по подпроцессу " + ident + omodel.Name(g_nloc), "Times New Roman",12,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_BOLD | Constants.FMT_LEFT,0);
                ooutfile.BeginSection(false, Constants.SECTION_DEFAULT);
                LandscapePage(false, ooutfile);
                Footer(ooutfile);
                otablename = omodel;
                MakeTable(omodel); // построение таблицы
                EndSection(ooutfile);
                //ooutfile.EndSection();
                PortraitPage(false, ooutfile);
                Footer(ooutfile);
            }
            //ooutfile.OutputField(Constants.FIELD_NEWSECTION,"Times New Roman",6,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_CENTER);
            first=false;
        }
      */  
        //-------------------------------------------------------------------------------------------  
        // перебираем все представления объектов в модели
        for (var i= 0; i < oobjacclist.length; i++) { 
            ocurrentobj=oobjacclist[i].ObjDef();              
            // проверка на цикл и первый вызов, проверка, является ли объект "Process Interface"
            spiincl = oobjacclist[i].ObjDef().Attribute(Constants.AT_TXT,g_nloc).GetValue(true).toString().toUpperCase(); // AS20130312
            strdescprint = oobjacclist[i].ObjDef().Attribute(Constants.AT_DESC,g_nloc).GetValue(true).toString();
            var strdesc = oobjacclist[i].ObjDef().Attribute(Constants.AT_DESC,g_nloc).GetValue(true).toString();
            bstrdesc = strRegExp.Search(strdesc);
            bpi = (((bpicheck == true && omodel.Type() == "EPC") || (bcheck4 == true && omodel.Type() == txtTypeDiagram)) && (spiincl == "IN" || bstrdesc)) || (oobjacclist[i].SymbolName() != "Интерфейс процесса" && oobjacclist[i].SymbolName() != "Диаграмма цепочки добавленного качества");
            if ((!ocurrentobj.IsEqual(oobjdef) || omodel.Type() == "EPC") && bpi == true) {
                // получаем модели, на которые ссылается объект
                
                omodelslist=ocurrentobj.AssignedModels();	                                   
                if (omodelslist.length > 0 || first) { 
                    //добавляем модель в общий список моделей процесса
                    if (first != true) {
                        omodellistglobal.push(omodelslist[0]);  
                        // определяем,  модель в общем списке была или еще нет
                        pcount = omodellistglobal.length;
                        omodellistglobal = ArisData.Unique(omodellistglobal);
                        diff = pcount - omodellistglobal.length;
                        identcount++;							
                    }
                    
                    
                    // выводим название модели                
                    if (identbool == true) { // номер модели высчитываем
                        if (diff == 0) {																 
                            if (first == true) {	
                                OutputModelNames(ident + " " + ocurrentobj.Name(g_nloc), ncurrentdepth);
                                firstcolmatrixagr.push(ident + " " + ocurrentobj.Name(g_nloc));
                                if (bstrdesc) ooutfile.OutputLn(strdescprint, "Times New Roman", 12,Constants.C_BLACK, Constants.C_TRANSPARENT, Constants.FMT_JUSTIFY, 0);							
                            } else {
                                OutputModelNames(ident+identcount.toString()+"."+" "+ocurrentobj.Name(g_nloc), ncurrentdepth);
                                firstcolmatrixagr.push(ident+identcount.toString()+"."+" "+ocurrentobj.Name(g_nloc));			
                                if (bstrdesc) ooutfile.OutputLn(strdescprint, "Times New Roman", 12,Constants.C_BLACK, Constants.C_TRANSPARENT, Constants.FMT_JUSTIFY, 0);						                    
                            }
                        } else { 
                            if (first == true) {
                                OutputModelNames(ident+" "+ocurrentobj.Name(g_nloc)+" (модель повторяется)", ncurrentdepth);
                                firstcolmatrixagr.push(ident+" "+ocurrentobj.Name(g_nloc)+" (модель повторяется)");
                                if (bstrdesc) ooutfile.OutputLn(strdescprint, "Times New Roman", 12,Constants.C_BLACK, Constants.C_TRANSPARENT, Constants.FMT_JUSTIFY, 0);
                            } else { 
                                OutputModelNames(ident+identcount.toString()+"."+" "+ocurrentobj.Name(g_nloc)+" (модель повторяется)", ncurrentdepth);
                                firstcolmatrixagr.push(ident+identcount.toString()+"."+" "+ocurrentobj.Name(g_nloc)+" (модель повторяется)");
                                if (bstrdesc) ooutfile.OutputLn(strdescprint, "Times New Roman", 12,Constants.C_BLACK, Constants.C_TRANSPARENT, Constants.FMT_JUSTIFY, 0);
                            }
                        }
                    } else {	// номер модели берем из идентификатора
                        if  (diff == 0) {
                            if (first == true) {
                                OutputModelNames(omodel.Attribute(Constants.AT_ID,g_nloc).GetValue(true).toString()+" "+ocurrentobj.Name(g_nloc), ncurrentdepth);									                    			                    									
                            } else {
                                OutputModelNames(omodelslist[0].Attribute(Constants.AT_ID,g_nloc).GetValue(true).toString()+" "+ocurrentobj.Name(g_nloc), ncurrentdepth);									                    			                    
                            }
                        } else { 
                            if (first == true) {
                                OutputModelNames(omodel.Attribute(Constants.AT_ID,g_nloc).GetValue(true).toString()+" "+ocurrentobj.Name(g_nloc)+" (модель повторяется)", ncurrentdepth);
                            } else {
                                OutputModelNames(omodelslist[0].Attribute(Constants.AT_ID,g_nloc).GetValue(true).toString()+" "+ocurrentobj.Name(g_nloc)+" (модель повторяется)", ncurrentdepth);
                            }	
                        }		                
                    }
                    if ((bcheck4 == true && omodel.Type() == "Диаграмма цепочки добавленного качества") || omodel.Type()== "EPC") {
                        // выводим названия детализирующих моделей
                        if (first == true) {
                            MakeContents(omodel, ocurrentobj, ident, identbool);                   
                        } else {
                            MakeContents(omodelslist[0], ocurrentobj, ident+identcount.toString()+".", identbool);
                        }
                    }
                    if (diff == 0) {
                        // выводим картинку
                        var landScape;
                        if (!bstrdesc) {
                            if (first == true) {
                                landScape = omodel.Flags() & Constants.MODEL_PRINT_LANDSCAPE;
                                opicture = omodel.Graphic(false,false,g_nloc);
                            } else {
                                landScape = omodelslist[0].Flags() & Constants.MODEL_PRINT_LANDSCAPE; 
                                opicture = omodelslist[0].Graphic(false,false,g_nloc);
                            }
                            if (landScape)
                            {
                                LandscapePage(false, ooutfile);   
                                ooutfile.OutGraphic(opicture,-1,257,150);
                                Footer(ooutfile);
                            } else {
                                PortraitPage(false, ooutfile);   
                                ooutfile.OutGraphic(opicture,-1,165,240);
                                Footer(ooutfile);
                            }
                        }					
                        // Выводим спецсимвол "со следующей страницы" после картинки, если модель value-added
                        if (omodel.Type()== "Диаграмма цепочки добавленного качества" && first == true) {
                            //вставка нового раздела
                            ooutfile.OutputField(Constants.FIELD_NEWSECTION,"Times New Roman",6,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_CENTER);
                        }
                        ooutfile.OutputLnF("","Title 3");
                        // рекурсия
                        if (!(ocurrentobj.IsEqual(oobjdef) && first == true)) {
                            OutputModels(false,omodelslist[0],ocurrentobj,omodellistall,ncurrentdepth+1,ident+identcount.toString()+".", identbool);
                        } else {
                            first=false;
                            ncurrentdepth++;
                        }
                    }
                } else {
                    if (first == true) first=false;
                }
            }                   			
        } // Next i
    } 
}

function MakeObjList(dococc, flag) {
    
    var ooperocclist = new Array(); // массив входящих представлений проводок для данного экземпляра документа
    var otermocclist = new Array(); //массив входящих представлений статусов для данного экземпляра документа
    
    //рассматриваем все связи представления документа  	             
    var ointechocclist = dococc.CxnOccList();
    /*
    'создаем список представлений объектов, связанных с документом с типом символа Operation
    Set oOperOccList = CreateObject ("ARISSERVER.ObjOccList.7.1")	
    'создаем список представлений объектов, связанных с документом с типом символа Technical Term				
    Set oTermOccList = CreateObject ("ARISSERVER.ObjOccList.7.1")
    */								
    // формируем список представлений объектов, связанных с документом с типом символа Operation
    for (k = 0 ; k < ointechocclist.length; k++) { 
        if (ointechocclist[k].SourceObjOcc().SymbolName() == "Операция") {
            ooperocclist.push(ointechocclist[k].SourceObjOcc()); // добавляем проводку по входящей связи
        }
        if (ointechocclist[k].TargetObjOcc().SymbolName() == "Операция") {   		          
            ooperocclist.push(ointechocclist[k].TargetObjOcc()); // добавляем проводку по исходящей связи
        }    
    }		                    
    // сортируем список проводок
    ooperocclist = ArisData.sort(ooperocclist, Constants.SORT_GEOMETRIC, g_nloc); // сортировка по расстоянию до левого верхнего угла
    
    // добавляем список проводок в общий список объектов
    for (k = 0; k < ooperocclist.length; k++) {
        if (flag == true) {
            oinpobjocclist.push(ooperocclist[k]); 				 				
        } else { 
            ooutobjocclist.push(ooperocclist[k]);
        }
    }
    ooperocclist = new Array();
    
    // добавляем в  список представления объектов, связанных с документом типом связи 86
    for (k = 0; k < ointechocclist.length; k++) { 
        switch (ointechocclist[k].CxnDef().TypeNum()) {
            case 86:
            otermocclist.push(ointechocclist[k].SourceObjOcc()); 
        }
    }		
    
    // сортируем список статусов
    // AB20161122	1. Добавлна сортировка технических терминов, атрибутов по номеру в иерархии "Constants.AT_HIER_NUM"
    otermocclist = ArisData.sort(otermocclist, Constants.AT_HIER_NUM, Constants.SORT_GEOMETRIC, g_nloc); // сортировка по расстоянию до левого верхнего угла
    
    // добавляем список статусов в общий список объектов
    for (k = 0; k < otermocclist.length; k++) {
        if (flag == true) {
            oinpobjocclist.push(otermocclist[k]);
        } else {
            ooutobjocclist.push(otermocclist[k]);				 		
        }
    }
    otermocclist = new Array();
}

// функция возвращает список названий объектов из массива
/*
function MakeListDisc(odeflist) {
    
    makelistdisc = "";
    if (odeflist.length = 0) return makelistdisc; // если массив пустой, возвращает пустую строку 
    
    for (i=0; i < odeflist.length; i++) {
        makelistdisc += makelistdisc + "Внимание! "+ odeflist[i].Name(g_nloc) + ". " + odeflist[i].Attribute(Constants.AT_DESC,g_nloc).GetValue(true) + vbCrLf;
    }
    return makelistdisc;
}
*/

function MakeContents(omodel, oobjdef, ident, identbool) {
    
    var oobjacclist = omodel.ObjOccListFilter(Constants.OT_FUNC);  // список экземпляров объектов типа Function на данной модели
    var oparentobjacclist = null; // список экземпляров объектов типа Function на данной модели
    var oparentmodel = null;
    var identcount = 0;   
    
    if (oobjacclist.length > 0) {
        if (identbool == true) {
            oobjacclist = ArisData.sort(oobjacclist, Constants.AT_HIER_NUM, Constants.SORT_GEOMETRIC, g_nloc); // сортировка по расстоянию до левого верхнего угла
        } else {
            // SortList oObjAccList, oObjdef  'сортировка по идентификаторам
        }	
        for (i= 0; i < oobjacclist.length; i++) {
            var ocurrentobj=oobjacclist[i].ObjDef(); // перебираем все представления объектов в модели
            var strdesc = oobjacclist[i].ObjDef().Attribute(Constants.AT_DESC,g_nloc).GetValue(true).toString();
            bstrdesc2 = strRegExp.Search(strdesc);
            spiincl = oobjacclist[i].ObjDef().Attribute(Constants.AT_TXT,g_nloc).GetValue(true).toString().toUpperCase();
            // проверка на цикл и проверка, является ли объект "Process Interface"
            if (!(ocurrentobj.IsEqual(oobjdef)) && ((bpicheck == true && (spiincl == "IN" || bstrdesc2)) || !(oobjacclist[i].SymbolName() == "Интерфейс процесса"))) { 			
                // получаем модели, на которые ссылается объект
                omodelslist=ocurrentobj.AssignedModels();	                                   
                // Set oParentModel = oModelsList.get(0)
                // oParentObjAccList=oParentModel.ObjOccListFilter (CStr(oModel.Name(G_nLoc)), G_nLoc) 
                // if  oParentObjAccList.Name(G_nLoc) = oModel.Name(G_nLoc) then Break
                // AS01062011 добавлено в if условие - And oModel.Type()<>"EPC"
                if (omodelslist.length > 0 && omodel.Type() != "EPC") {             
                    if (identbool == true) {
                        // выводим название модели, номера формируются автоматически
                        identcount++;
                        ooutfile.OutputLn(ident + identcount.toString() + "." + " " + ocurrentobj.Name(g_nloc), "Times New Roman", 12,Constants.C_BLACK, Constants.C_TRANSPARENT, Constants.FMT_LEFT, 0);
                    } else {
                        //выводим название модели, номера формируются из идентификаторов							
                        ooutfile.OutputLn(omodelslist[0].Attribute(Constants.AT_ID,g_nloc).GetValue(true).toString() + " " + ocurrentobj.Name(g_nloc), "Times New Roman",12, Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_LEFT,0);
                    }
                }
            }
        } // end for		
    } // end if
    ooutfile.OutputLn("", "Times New Roman", 12, Constants.C_BLACK, Constants.C_TRANSPARENT, Constants.FMT_BOLD | Constants.FMT_LEFT, 0);
}

// вывод названий моделей
function OutputModelNames(modelname, ncurrentdepth) {
    
    switch (ncurrentdepth) { 
        case 0:{
            ooutfile.OutputLnF(modelname,"Heading 1");
            break;
        } 
        case 1:{
            ooutfile.OutputLnF(modelname,"Heading 2");
            break;
        }  
        case 2:{
            ooutfile.OutputLnF(modelname,"Heading 3");
            break;
        }  
        case 3:{
            ooutfile.OutputLnF(modelname,"Heading 4");
            break;
        }  
        case 4:{
            ooutfile.OutputLnF(modelname,"Heading 5");
            break;
        }  
        case 5:{
            ooutfile.OutputLnF(modelname,"Heading 6");
            break;
        }  
        case 6:{
            ooutfile.OutputLnF(modelname,"Heading 7");
            break;
        }  
        case 7:{
            ooutfile.OutputLnF(modelname,"Heading 8");
            break;
        }  
        case 8:
        ooutfile.OutputLnF(modelname,"Heading 9");
    } 
    
}


// Выводит результирующую таблицу кол-ва функций и их удельные веса в конце документа
function CrtTotFuncTable () {
    
    var totperc = 0; // Содержит итоговоый процент
    var tempperc = 0; // Содержит промежуточный удельный вес каждой функции
    var	ii = 1;
    
    if (bcheck2 == true) {
        
        OutputModelNames("Уровень автоматизации бизнес-процесса в разбивке по моделям 3-его и ниже уровней", 0);
        
        ooutfile.BeginTable(100,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_LEFT | Constants.FMT_JUSTIFY,0); //открываем таблицу
        ooutfile.TableRow(); // добавляем строку
        ooutfile.TableCellF("Наименование модели бизнес-процесса",40,"TableTop");        //вывод клетки наименование модели бизнес-процесса
        ooutfile.TableCellF("Кол-во автоматизированных функций",15,"TableTop");          // вывод кол-во автоматизированных функций
        ooutfile.TableCellF("Кол-во функций к автоматизации",15,"TableTop");             // вывод кол-во функций к автоматизации
        ooutfile.TableCellF("Кол-во неавтоматизированных функций",15,"TableTop");        // вывод кол-во функций неавтоматизированных
        ooutfile.TableCellF("В том числе, кол-во контролирующих функций",15,"TableTop"); // вывод кол-во контролирующих функций
        
        
        while (tottable(ii, 0) != "") {
            // выводит кол-во атоматизированных функций, функций к автоматизации, функций неавтоматизированных 
            
            ooutfile.TableRow();
            ooutfile.TableCellF(tottable(ii,0),40,"TableBottom");
            
            for (var jj = 1; jj <= 4; jj++) {
                if (tottable(ii,jj) != 0 && tottable(ii,jj) != "") { 
                    ooutfile.TableCellF(tottable(ii,jj),15,"TableTop");
                } else {
                    ooutfile.TableCellF("-",15,"TableTop");
                }
            }
            ii++;
        }
        
        if (totavtfunc > 0) {
            ooutfile.TableRow();
            ooutfile.TableCellF("Итого",40,"TableLeftEnd");
            ooutfile.TableCellF(totavtfunc.toString(),15,"TableEnd");
        } else {
            ooutfile.TableRow();
            ooutfile.TableCellF("Итого",40,"TableEnd");
            ooutfile.TableCellF("-",15,"TableEnd");
        }
        
        if (totshldavtfunc > 0 ) {
            ooutfile.TableCellF(totshldavtfunc.toString(),15,"TableEnd");
        } else {
            ooutfile.TableCellF("-",15,"TableEnd");
        }
        
        if (totnoavtfunc > 0) {
            ooutfile.TableCellF(totnoavtfunc.toString(),15,"TableEnd");
        } else {
            ooutfile.TableCellF("-",15,"TableEnd");
        }
        
        if (totcontrolfunc > 0) {
            ooutfile.TableCellF(totcontrolfunc.toString(),15,"TableEnd");
        } else {
            ooutfile.TableCellF("-",15,"TableEnd");
        }
        
        var stablename = "";    
        // закрываем таблицу
        ooutfile.EndTable(stablename,100, "Arial",11,Constants.C_BLACK,Constants.C_TRANSPARENT,0,Constants.FMT_LEFT | Constants.FMT_JUSTIFY,0);
    }
    
    if (bcheck3 == true) {
        
        totfunc = totavtfunc + totshldavtfunc + totnoavtfunc;
        
        if (bcheck2 == true) {
            // вставка нового раздела
            ooutfile.OutputField(Constants.FIELD_NEWSECTION,"Times New Roman",6,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_CENTER);
        } 
        
        ooutfile.OutputField(Constants.FIELD_NEWSECTION,"Times New Roman",6,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_CENTER);
        
        OutputModelNames("Степень автоматизации бизнес-процесса", 0);							
        
        ooutfile.BeginTable(100,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_LEFT | Constants.FMT_JUSTIFY,0); // открываем таблицу
        ooutfile.TableRow(); // добавляем строку
        ooutfile.TableCellF("",70,"TableTop"); // вывод пустой клетки
        ooutfile.TableCellF("Кол-во функций",15,"TableTop"); // вывод кол-во функций
        ooutfile.TableCellF("Удельный вес",15,"TableTop");   // вывод удельный вес
        
        // выводит кол-во атоматизированных функций
        if (totavtfunc > 0) {
            ooutfile.TableRow();
            ooutfile.TableCellF("Всего автоматизированных функций",70,"TableBottom");
            ooutfile.TableCellF(totavtfunc.toString(),15,"TableTop");
            tempperc = (totavtfunc/totfunc*100);
            totperc += tempperc;
            ooutfile.TableCellF(tempperc.toFixed(1) + " %",15,"TableTop");
        }
        
        //выводит кол-во функций к автоматизации
        if (totshldavtfunc > 0) {
            ooutfile.TableRow();
            ooutfile.TableCellF("Всего функций, подлежащих автоматизации",70,"TableBottom");
            tempperc = (totshldavtfunc/totfunc*100);
            totperc += tempperc;
            ooutfile.TableCellF(totshldavtfunc.toString(),15,"TableTop");
            ooutfile.TableCellF(tempperc.toFixed(1) + " %",15,"TableTop");
        }
        
        // выводит кол-во неавтоматизированных функций
        if (totnoavtfunc > 0) {
            ooutfile.TableRow();
            ooutfile.TableCellF("Всего неавтоматизированных функций",70,"TableBottom");
            tempperc = (totnoavtfunc/totfunc*100);
            totperc += tempperc;
            ooutfile.TableCellF(totnoavtfunc.toString(),15,"TableTop");
            ooutfile.TableCellF(tempperc.toFixed(1) + " %",15,"TableTop");
        }
        /*	
        'AS20110906 Begin
        'выводит кол-во контролирующих функций
        'If TotControlFunc >0 Then
        '	g_oOutFile.TableRow()
        '	g_oOutFile.TableCellF("Всего контролирующих функций",70,"TableBottom")
        '	TempPerc = Round(TotControlFunc/TotFunc*100,1)
        '	TotPerc = TotPerc + TemPerc
        '	g_oOutFile.TableCellF(CStr(TotControlFunc),15,"TableTop")
        '	g_oOutFile.TableCellF(CStr(TempPerc) + " %",15,"TableTop")
        'End If
        'AS20110906 End
        */
        // выводит общее кол-во функций
        if (totfunc > 0) {
            ooutfile.TableRow();
            ooutfile.TableCellF("Итого",70,"TableLeftEnd");
            ooutfile.TableCellF(totfunc.toString(),15,"TableEnd");
            ooutfile.TableCellF(totperc.toFixed(2) + " %",15,"TableEnd");
        }
        
        var	stablename = "";
        
        ooutfile.EndTable(stablename,100, "Arial",11,Constants.C_BLACK,Constants.C_TRANSPARENT,0,Constants.FMT_LEFT | Constants.FMT_JUSTIFY,0);
    }
}


function BuildMatrixAgreement() {
    
    ooutfile.OutputLnF("Матрица согласования модели бизнес-процесса", "Heading 1");
    ooutfile.OutputLnF (osinglemodel.Name(g_nloc),"HeaderMatrix");
    ooutfile.BeginTable(100,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_LEFT | Constants.FMT_JUSTIFY | Constants.FMT_REPEAT_HEADER,0); //открываем таблицу
    ooutfile.TableRow();
    ooutfile.TableCellF("Наименование подпроцессов (цель описания (оптимизации)) БП",55,"TableTop");
    for (var j=0; j<expertnum; j++) {
        ooutfile.TableCellF("",45/expertnum,"TableTop");    //вывод клетки наименование модели бизнес-процесса   
    }
    for (var i=0; i < firstcolmatrixagr.length; i++) {
        ooutfile.TableRow(); // добавляем строку
        ooutfile.TableCellF(firstcolmatrixagr[i],55,"StringTable1");    //вывод клетки наименование модели бизнес-процесса
        for (var j=0; j<expertnum; j++) {
            if (j==0) {
                ooutfile.TableCellF("С",45/expertnum,"TableTop");    //вывод клетки наименование модели бизнес-процесса   
            } else {
                ooutfile.TableCellF("-",45/expertnum,"StringTable2");
            }
        }
    }
    ooutfile.EndTable("",100, "Times New Roman",10,Constants.C_BLACK,Constants.C_TRANSPARENT,0,Constants.FMT_LEFT | Constants.FMT_JUSTIFY,0);
    
}

function LandscapePage(beginsection, outfile) {
    
    if (beginsection == true) outfile.BeginSection(true, Constants.SECTION_DEFAULT);
    outfile.SetPageWidth(297);	 
    outfile.SetPageHeight(210);
    outfile.SetLeftMargin(20);
    outfile.SetRightMargin(20);
    outfile.SetTopMargin(30);
    outfile.SetBottomMargin(10);
    outfile.SetDistFooter(10);
}

function PortraitPage(beginsection, outfile) {
    
    if (beginsection == true) outfile.BeginSection(true, Constants.SECTION_DEFAULT);    
    outfile.SetPageWidth(210);	 
    outfile.SetPageHeight(297);
    outfile.SetLeftMargin(30);
    outfile.SetRightMargin(10);
    outfile.SetTopMargin(20);
    outfile.SetBottomMargin(20);
    outfile.SetDistFooter(10);
}    

function EndSection(outfile) {
    
    outfile.EndSection();  
}

function Footer(outfile) {
    
    var image = undefined;
    outfile.BeginFooter();
    outfile.BeginTable(100,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_CENTER,0);
    outfile.TableRow();
    outfile.TableCellF("",35,"Footer");
    image = Context.createPicture("LogoAPB.jpg");
    outfile.OutGraphic(image,-1,30,30);
    outfile.TableCellF("",35,"Footer");
    outfile.BeginParagraph(Constants.FMT_CENTER,0,0,0,0,0);
    outfile.OutputF(getString("TEXT_1"),"Footer");
    outfile.EndParagraph();
    outfile.TableCellF("",30,"Footer");
    outfile.BeginParagraph(Constants.FMT_CENTER,0,0,0,0,0);
    outfile.OutputF("Стр.","Footer");
    ooutfile.OutputField(Constants.FIELD_PAGE,"Times New Roman",12,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_CENTER);
    outfile.OutputF(" из ","Footer");
    ooutfile.OutputField(Constants.FIELD_NUMPAGES,"Times New Roman",12,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_CENTER);
    outfile.EndParagraph();
    outfile.EndTable("",100,"Times New Roman",12,Constants.C_BLACK,Constants.C_TRANSPARENT,0,Constants.FMT_CENTER,0);
    outfile.EndFooter();
}

function ToC(outfile) {
    outfile.BeginSection(false, Constants.SECTION_INDEX);
    Footer(outfile);
    outfile.SetAutoTOCNumbering(false);
    for (var i=0; i<=3; i++)
        outfile.SetTOCFormat(i, "Times New Roman", 10 , Constants.C_BLACK, Constants.C_WHITE, Constants.FMT_LEFT, i*3, 0, 0, 0);
    outfile.OutputLn("Содержание", "Times New Roman",12,Constants.C_BLACK,Constants.C_TRANSPARENT,Constants.FMT_BOLD | Constants.FMT_LEFT,0);
    outfile.OutputField(Constants.FIELD_TOC, "Times New Roman",10, Constants.C_BLACK, Constants.C_WHITE, Constants.FMT_LEFT);
    outfile.EndSection();  
}

main();
